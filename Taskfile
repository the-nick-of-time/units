#!/bin/bash
# See https://github.com/adriancooney/Taskfile for examples

# Sane error handling
set -e -u -o pipefail

function default {
	# Fill this to run a default task (with whatever arguments you want too)
	task_help
}

### HELPER FUNCTIONS
function fetch_fftab_script() {
	if [ ! -f list-fftabs.py ] ; then
		curl --remote-name http://nthurmes.duckdns.org/files/list-fftabs.py
	fi
}

function already_open() {
	fetch_fftab_script
	opened="$(poetry run python list-fftabs.py)"
	# implicit return the exit status of grep
	grep -q "$1$" <<<"$opened"
}

### TASKS
function task_test() {
	: "Run unit test suite"
	poetry run pytest "$@"
}

function task_coverage() {
	: "Compile and open unit test coverage statistics"
	target="htmlcov/index.html"
	poetry run make "$target"
	if ! already_open "$target" ; then
		firefox "$target"
	fi
}

function task_docs() {
	: "Build and open docs"
	target="docs/_build/index.html"
	poetry run make "$target"
	if ! already_open "$target" ; then
		firefox "$target"
	fi
}

function task_build() {
	: "Build wheel from the sources"
	poetry run make "dist/pyunitx-$(poetry version --short)-py3-none-any.whl"
}

function task_clean() {
	: "Delete build and doc files for a fresh start"
	(
		cd "$(git rev-parse --show-toplevel)"
		rm -f .coverage
		rm -rf docs/_build
		rm -rf dist
		rm -rf htmlcov
		rm -f conftest.py
		rm -f test_readme.py
	)
}

function task_coveralls() {
	: "Upload the coverage data to coveralls to update badge"
	COVERALLS_REPO_TOKEN="$COVERALLS_PYUNITX" poetry run coveralls
}

# Print documentation for tasks
function task_help {
	: "Auto-generate list of tasks, including documentation in the form of these noop statements"
	compgen -A function | while read -r name ; do
		if [[ $name =~ ^task_ ]] ; then
			paste <(printf '%s' "${name#task_}") <(type "$name" | sed -nEe 's/^[[:space:]]*: ?"(.*)";/\1/p')
		fi
	done
}

if [[ $# -eq 0 ]] ; then
	default
else
	cmd="task_$1"
	shift
	"$cmd" "$@"
fi
